// prisma/schema.prisma

// Atualizado conforme novo schema com Funcionario, enums e ajustes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo para controlo de Token de Refresh
model RefreshToken {
  TokenID   Int      @id @default(autoincrement())
  token     String   @unique
  UsuarioID Int
  Usuario   Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
  ExpiresAt DateTime
  CreatedAt DateTime @default(now())

  @@index([UsuarioID])
  @@index([ExpiresAt])
}

model PasswordReset {
  PasswordResetID Int      @id @default(autoincrement())
  Token           String   @unique
  UsuarioID       Int
  Usuario         Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
  ExpiresAt       DateTime
  Used            Boolean  @default(false)
  CreatedAt       DateTime @default(now())

  @@index([UsuarioID])
  @@index([ExpiresAt])
  @@index([Token, Used])
}

enum Estado {
  PRESENTE
  FALTA
}

enum TipoUsuario {
  FUNCIONARIO
  PROFESSOR
}

enum Departamento {
  INFORMATICA
  OUTROS
}

enum Cargo {
  SUMARISTA
  SECRETARIO
  ADMINISTRATIVO
  OUTROS
}

model Professor {
  ProfessorID  Int              @id @default(autoincrement())
  Nome         String           @db.VarChar(100)
  Departamento Departamento
  CargaHoraria Int              @db.Int
  Cursos       ProfessorCurso[]
  Sumarios     Sumario[]        @relation("ProfessorSumarios")
  Presencas    Presenca[]
  Efetividades Efetividade[]
  Usuario      Usuario?         @relation(fields: [UsuarioID], references: [UsuarioID])
  UsuarioID    Int?             @unique
  CreatedAt    DateTime         @default(now())
  UpdatedAt    DateTime         @default(now()) @updatedAt

  @@index([Departamento])
  @@index([Nome])
}

model Funcionario {
  FuncionarioID Int      @id @default(autoincrement())
  Nome          String   @db.VarChar(100)
  Email         String   @unique @db.VarChar(100)
  Cargo         Cargo
  Usuario       Usuario? @relation(fields: [UsuarioID], references: [UsuarioID])
  UsuarioID     Int?     @unique
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @default(now()) @updatedAt

  @@index([Cargo])
  @@index([Nome])
}

model Usuario {
  UsuarioID   Int                @id @default(autoincrement())
  Nome        String             @db.VarChar(100)
  Email       String             @unique @db.VarChar(100)
  SenhaHash   String             @db.VarChar(255)
  Tipo        TipoUsuario
  Permissoes  UsuarioPermissao[]
  Professor   Professor?
  Funcionario Funcionario?

  RefreshTokens  RefreshToken[]
  PasswordResets PasswordReset[]
  CreatedAt      DateTime        @default(now())
  UpdatedAt      DateTime        @default(now()) @updatedAt

  @@index([Tipo])
  @@index([Nome])
}

model Curso {
  CursoID     Int              @id @default(autoincrement())
  Nome        String           @db.VarChar(100)
  Descricao   String           @db.Text
  Professores ProfessorCurso[]
  Sumarios    Sumario[]
  CreatedAt   DateTime         @default(now())
  UpdatedAt   DateTime         @default(now()) @updatedAt
  Presenca    Presenca[]
  Efetividade Efetividade[]

  @@index([Nome])
}

model Sumario {
  SumarioID   Int       @id @default(autoincrement())
  Data        DateTime
  Conteudo    String    @db.Text
  CursoID     Int
  ProfessorID Int
  Curso       Curso     @relation(fields: [CursoID], references: [CursoID], onDelete: Cascade)
  Professor   Professor @relation("ProfessorSumarios", fields: [ProfessorID], references: [ProfessorID], onDelete: Cascade)
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @default(now()) @updatedAt

  @@index([CursoID])
  @@index([ProfessorID])
  @@index([Data])
  @@index([Data, CursoID])
}

model ProfessorCurso {
  ProfessorID Int
  CursoID     Int
  Professor   Professor @relation(fields: [ProfessorID], references: [ProfessorID], onDelete: Cascade)
  Curso       Curso     @relation(fields: [CursoID], references: [CursoID], onDelete: Cascade)
  CreatedAt   DateTime  @default(now())

  @@id([ProfessorID, CursoID])
  @@index([ProfessorID])
  @@index([CursoID])
}

model Presenca {
  PresencaID  Int       @id @default(autoincrement())
  Data        DateTime
  Estado      Estado
  ProfessorID Int
  CursoID     Int       @default(1)
  Professor   Professor @relation(fields: [ProfessorID], references: [ProfessorID], onDelete: Restrict)
  Curso       Curso     @relation(fields: [CursoID], references: [CursoID], onDelete: Restrict)
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt

  @@index([ProfessorID])
  @@index([CursoID])
  @@index([Data])
  @@index([Data, ProfessorID]) // Índice composto para relatórios de presença
  @@index([Estado]) // Índice para filtros por estado
}

model Efetividade {
  EfetividadeID    Int       @id @default(autoincrement())
  Data             DateTime
  HorasTrabalhadas Int       @db.Int
  ProfessorID      Int
  CursoID          Int       @default(1)
  Professor        Professor @relation(fields: [ProfessorID], references: [ProfessorID], onDelete: Restrict)
  Curso            Curso     @relation(fields: [CursoID], references: [CursoID], onDelete: Restrict)
  CreatedAt        DateTime  @default(now())
  UpdatedAt        DateTime  @updatedAt

  @@index([ProfessorID])
  @@index([CursoID])
  @@index([Data])
  @@index([Data, ProfessorID]) // Índice composto para relatórios
}

model Permissao {
  PermissaoID Int                @id @default(autoincrement())
  Descricao   String             @db.VarChar(100)
  Usuarios    UsuarioPermissao[]

  @@index([Descricao])
}

model UsuarioPermissao {
  UsuarioID   Int
  PermissaoID Int
  Usuario     Usuario   @relation(fields: [UsuarioID], references: [UsuarioID])
  Permissao   Permissao @relation(fields: [PermissaoID], references: [PermissaoID])

  @@id([UsuarioID, PermissaoID])
}
