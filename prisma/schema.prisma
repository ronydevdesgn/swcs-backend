// prisma/schema.prisma

// Atualizado conforme novo schema com Funcionario, enums e ajustes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Novo modelo schema.prisma para o controlo de Token
model RefreshToken {
  TokenID     Int      @id @default(autoincrement())
  token       String   @unique
  UsuarioID   Int
  Usuario     Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
  ExpiresAt   DateTime
  CreatedAt   DateTime @default(now())

  @@index([UsuarioID])
}

model PasswordReset {
  PasswordResetID Int      @id @default(autoincrement())
  Token          String   @unique
  UsuarioID      Int
  Usuario        Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
  ExpiresAt      DateTime
  Used           Boolean  @default(false)
  CreatedAt      DateTime @default(now())

  @@index([UsuarioID])
}

enum Estado {
  PRESENTE
  FALTA
}

enum TipoUsuario {
  FUNCIONARIO
  PROFESSOR
}

model Professor {
  ProfessorID    Int          @id @default(autoincrement())
  Nome           String       @db.VarChar(100)
  Departamento   String       @db.VarChar(100)
  CargaHoraria   Int
  Sumarios       Sumario[]    @relation("ProfessorSumarios")
  Presencas      Presenca[]
  Efetividades   Efetividade[]
  Usuario        Usuario?     @relation(fields: [UsuarioID], references: [UsuarioID])
  UsuarioID      Int?         @unique
}

model Funcionario {
  FuncionarioID  Int        @id @default(autoincrement())
  Nome           String     @db.VarChar(100)
  Email          String     @unique @db.VarChar(100)
  Cargo          String     @db.VarChar(100) // Ex: "Sumarista", "Secret√°rio"
  Usuario        Usuario?   @relation(fields: [UsuarioID], references: [UsuarioID])
  UsuarioID      Int?       @unique
}

model Usuario {
  UsuarioID     Int                 @id @default(autoincrement())
  Nome          String              @db.VarChar(100)
  Email         String              @unique @db.VarChar(100)
  SenhaHash     String              @db.VarChar(100)
  Tipo          TipoUsuario
  Permissoes    UsuarioPermissao[]
  Professor     Professor?
  Funcionario   Funcionario?

  RefreshTokens    RefreshToken[]
  PasswordResets   PasswordReset[]
}

model Curso {
  CursoID      Int        @id @default(autoincrement())
  Nome         String     @db.VarChar(100)
  Descricao    String     @db.Text
  Sumarios     Sumario[]
}

model Sumario {
  SumarioID     Int       @id @default(autoincrement())
  Data          DateTime
  Conteudo      String    @db.Text
  CursoID       Int
  ProfessorID   Int
  Curso         Curso     @relation(fields: [CursoID], references: [CursoID])
  Professor     Professor @relation("ProfessorSumarios", fields: [ProfessorID], references: [ProfessorID])

  @@index([CursoID])
  @@index([ProfessorID])
}

model Presenca {
  PresencaID   Int       @id @default(autoincrement())
  Data         DateTime
  Estado       Estado
  ProfessorID  Int
  Professor    Professor @relation(fields: [ProfessorID], references: [ProfessorID])

  @@index([ProfessorID])
}

model Efetividade {
  EfetividadeID  Int       @id @default(autoincrement())
  Data           DateTime
  HorasTrabalhadas Int
  ProfessorID    Int
  Professor      Professor @relation(fields: [ProfessorID], references: [ProfessorID])

  @@index([ProfessorID])
}

model Permissao {
  PermissaoID  Int                @id @default(autoincrement())
  Descricao    String             @db.VarChar(100)
  Usuarios     UsuarioPermissao[]
}

model UsuarioPermissao {
  UsuarioID    Int
  PermissaoID  Int
  Usuario      Usuario   @relation(fields: [UsuarioID], references: [UsuarioID])
  Permissao    Permissao @relation(fields: [PermissaoID], references: [PermissaoID])

  @@id([UsuarioID, PermissaoID])
}